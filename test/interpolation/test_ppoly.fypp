! SPDX-Identifier: MIT

#:include "common.fypp"

module test_ppoly
    use testdrive, only : new_unittest, unittest_type, error_type, check
    use stdlib_kinds, only: sp, dp, xdp, qp
    implicit none

    public :: collect_ppoly

contains

    !> Collect all exported unit tests
    subroutine collect_ppoly(testsuite)
        !> Collection of tests
        type(unittest_type), allocatable, intent(out) :: testsuite(:)

        testsuite = [ &
            #:for k1, t1 in REAL_KINDS_TYPES
            new_unittest( &
                "ppoly_differentiate_${k1}_degree_3$", &
                test_ppoly_differentiate_${k1}$_degree_3 &
            ), &
            new_unittest( &
                "find_interval_${k1}$_n_2", &
                test_find_interval_${k1}$_n_2 &
            ), &
            new_unittest( &
                "find_interval_${k1}$_n_10", &
                test_find_interval_${k1}$_n_10 &
            ), &
            #:endfor
            new_unittest("dummy", test_dummy) &
            ]

    end subroutine collect_ppoly

    #:for k1, t1 in REAL_KINDS_TYPES
    subroutine test_ppoly_differentiate_${k1}$_degree_3(error)
        use stdlib_interpolation, only: ppoly_differentiate

        !> Error handling
        type(error_type), allocatable, intent(out) :: error
        integer, parameter :: deg = 3, np = 5
        ${t1}$, parameter :: ZERO = 0.0_${k1}$
        ${t1}$ :: &
                c(deg + 1, np), &
                d0c(deg + 1, np), &
                d1c(max(deg, 1), np), &
                d2c(max(deg-1, 1), np), &
                d3c(max(deg-2, 1), np), &
                d4c(max(deg-3, 1), np), &
                d1c_exact(max(deg, 1), np), &
                d2c_exact(max(deg-1, 1), np), &
                d3c_exact(max(deg-2, 1), np), &
                d4c_exact(max(deg-3, 1), np)
        integer :: j, k, n

        ! valid test case
        c = reshape([(real(k, ${k1}$), k=1, size(c))], shape(c))

        ! exact first derivative
        n = size(d1c_exact, 1)
        do j = 1, np
            d1c_exact(:, j) = c(1:n, j) * [3.0_${k1}$, 2.0_${k1}$, 1.0_${k1}$]
        end do

        n = size(d2c_exact, 1)
        do j = 1, np
            d2c_exact(:, j) = c(1:n, j) * [6.0_${k1}$, 2.0_${k1}$]
        end do

        n = size(d3c_exact, 1)
        do j = 1, np
            d3c_exact(:, j) = c(1:n, j) * [6.0_${k1}$]
        end do

        d4c_exact = 0.0_${k1}$

        call ppoly_differentiate(c, 0, d0c)
        call check(error, maxval(abs(c - d0c)), ZERO)
        if (allocated(error)) return
        call ppoly_differentiate(c, 1, d1c)
        call check(error, maxval(abs(d1c - d1c_exact)), ZERO)
        if (allocated(error)) return
        call ppoly_differentiate(c, 2, d2c)
        call check(error, maxval(abs(d2c - d2c_exact)), ZERO)
        if (allocated(error)) return
        call ppoly_differentiate(c, 3, d3c)
        call check(error, maxval(abs(d3c - d3c_exact)), ZERO)
        call ppoly_differentiate(c, 4, d4c)
        call check(error, maxval(abs(d4c - d4c_exact)), ZERO)
        if (allocated(error)) return
    end subroutine

    subroutine test_find_interval_${k1}$_n_2(error)
        use stdlib_interpolation, only: find_interval
        use stdlib_math, only: linspace

        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 2
        ${t1}$, parameter :: start = 0._${k1}$, end = 1._${k1}$
        ${t1}$, allocatable :: xb(:)
        ${t1}$ :: x
        integer :: outflag, index

        allocate(xb, source=linspace(start, end, n))

        x = - 0.8_${k1}$
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == 1) .and. (outflag == -1)))
        if (allocated(error)) return

        x = 0._${k1}$
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == 1) .and. (outflag == 0)))
        if (allocated(error)) return

        x = 1._${k1}$
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == 1) .and. (outflag == 0)))
        if (allocated(error)) return

        x = 2._${k1}$
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == 1) .and. (outflag == 1)))
        if (allocated(error)) return
    end subroutine

    subroutine test_find_interval_${k1}$_n_10(error)
        use stdlib_interpolation, only: find_interval
        use stdlib_math, only: linspace

        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 10
        ${t1}$, parameter :: start = 0._${k1}$, end = 1._${k1}$
        ${t1}$, allocatable :: xb(:)
        ${t1}$ :: x
        integer :: outflag, index, j

        allocate(xb, source=linspace(start, end, n))

        x = start - epsilon(start)
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == 1) .and. (outflag == -1)))
        if (allocated(error)) return

        x = start
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == 1) .and. (outflag == 0)))
        if (allocated(error)) return

        do j = 1, n-1
            x = xb(j)
            call find_interval(x, xb, index, outflag)
            call check(error, ((index == j) .and. (outflag == 0)))
            if (allocated(error)) return
        end do

        x = end
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == n-1) .and. (outflag == 0)))
        if (allocated(error)) return

        x = end + epsilon(end)
        call find_interval(x, xb, index, outflag)
        call check(error, ((index == n-1) .and. (outflag == 1)))
        if (allocated(error)) return

    end subroutine

    subroutine test_ppoly_evaluate_${k1}$(error)
        use stdlib_interpolation, only: find_interval
        use stdlib_math, only: linspace

        !> Error handling
        type(error_type), allocatable, intent(out) :: error

        integer, parameter :: n = 10
        ${t1}$, parameter :: start = 0._${k1}$, end = 1._${k1}$
        ${t1}$, allocatable :: xb(:)
        ${t1}$ :: x
        integer :: outflag, index, j

    end subroutine
    #:endfor

    subroutine test_dummy(error)
        !> Error handling
        type(error_type), allocatable, intent(out) :: error
    end subroutine

end module test_ppoly

program tester
    use, intrinsic :: iso_fortran_env, only : error_unit
    use testdrive, only : run_testsuite, new_testsuite, testsuite_type
    use test_ppoly, only : collect_ppoly
    implicit none
    integer :: stat, is
    type(testsuite_type), allocatable :: testsuites(:)
    character(len=*), parameter :: fmt = '("#", *(1x, a))'

    stat = 0

    testsuites = [ &
        new_testsuite("ppoly", collect_ppoly) &
        ]

    do is = 1, size(testsuites)
        write(error_unit, fmt) "Testing:", testsuites(is)%name
        call run_testsuite(testsuites(is)%collect, error_unit, stat)
    end do

    if (stat > 0) then
        write(error_unit, '(i0, 1x, a)') stat, "test(s) failed!"
        error stop
    end if
end program tester
